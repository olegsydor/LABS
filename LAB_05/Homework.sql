/*1. Написати запити з використанням під-запитів:*/

/*1a.	Отримати номери виробів, для яких всі деталі постачає постачальник 3*/
/*1b.	Отримати номера і прізвища постачальників, які постачають деталі для якого-небудь виробу з деталлю 1 в кількості більшій, ніж середній об’єм поставок деталі 1 для цього виробу*/
/*1c.	Отримати повний список деталей для всіх виробів, які виготовляються в Лондоні*/
/*1d.	Показати номери і назви постачальників, що постачають принаймні одну червону деталь*/
/*1e.	Показати номери деталей, які використовуються принаймні в одному виробі, який поставляється постачальником 2*/
/*1f.	Отримати номери виробів, для яких середній об’єм поставки деталей  більший за найбільший об’єм поставки будь-якої деталі для виробу 1*/
/*1g.	Вибрати вироби, що ніколи не постачались (під-запит)*/

/*2. Написати запити використовуючи CTE  або Hierarchical queries*/
/*2a. Написати довільний запит з двома СТЕ  (в одному є звертання до іншого) */
/*2b.	Обчислити за допомогою рекурсивної CTE факторіал від 10  та вивести у форматі таблиці з колонками Position та Value :*/

;WITH F_CTE (rowOrder, nFaktorial) AS
(SELECT 1 AS rowOrder, 1 AS nFaktorial
UNION ALL
SELECT rowOrder+1 AS rowOrder, nFaktorial*(rowOrder+1) AS nFaktorial
from F_CTE AS S_CTE
where S_CTE.rowOrder < 10
)
SELECT TOP 1 rowOrder, nFaktorial FROM F_CTE
ORDER BY rowOrder DESC
GO

/*2c.	Обчислити за допомогою рекурсивної CTE перші 20 елементів ряду Фібоначчі та вивести у форматі таблиці з колонками Position та Value */
;WITH F_CTE (rowOrder, nFibo, n0Fibo) AS
(SELECT 1 as rowOrder, 1 as nFibo, 0 as n0Fibo
UNION ALL
SELECT rowOrder+1, nFibo+n0Fibo, nFibo
from F_CTE AS S_CTE
where S_CTE.rowOrder < 20
)
SELECT rowOrder, nFibo FROM F_CTE
GO

/*2d. Розділити вхідний період 2013-11-25 до 2014-03-05 на періоди по календарним місяцям за допомогою рекурсивної CTE та вивести у форматі таблиці з колонками StartDate та EndDate  */
/*2e. Розрахувати календар поточного місяця за допомогою рекурсивної CTE та вивести дні місяця у форматі таблиці з колонками */

/*3. Geography	*/
/*3a. Створити таблицю  geography  та занести в неї дані */
/*3b. Написати запит  який повертає регіони першого рівня (результат нижче)*/
/*3c. Написати запит який повертає під-дерево для конкретного регіону  (наприклад, Івано-Франківськ). Результат має виглядати наступним чином (колонки можуть називатися інакше)*/
/*3d. Написати запит котрий вертає повне дерево  від root ('Ukraine') і додаткову колонку, яка вказує на рівень в ієрархії*/
/*3e. Написати запит який повертає дерево для регіону Lviv . Результат має виглядати наступним чином (назви колонок можуть не співпадати):*/
/*3f. Написати запит який повертає дерево зі шляхами для регіону Lviv. Результат має виглядати наступним чином (назви колонок можуть не співпадати):*/
/*3g. Написати запит, який повертає дерево  зі шляхами і довжиною шляхів для регіону Lviv. Результат має виглядати наступним чином (назви колонок можуть не співпадати):*/

/*4. Написати запити використовуючи UNION, UNION ALL , EXCEPT, INTERSECT*/

/*4a.	Вибрати постачальників з Лондона або Парижу*/
/*4b.	Вибрати всі міста, де є постачальники  і/або деталі (два запити – перший повертає міста з дублікатами, другий без дублікатів) . Міста у кожному запиті  відсортувати в алфавітному порядку */
/*4c.	Вибрати всіх постачальників за вийнятком тих, що постачають деталі з Лондона */
/*4d.	Знайти різницю між множиною продуктів, які знаходяться в Лондоні та Парижі  і множиною продуктів, які знаходяться в Парижі та Римі*/
/*4e.	Вибрати поставки, що зробив постачальник з Лондона, а також поставки зелених деталей за виключенням поставлених виробів з Парижу (код постачальника, код деталі, код виробу)*/
